{"./":{"url":"./","title":"目录","keywords":"","body":"目录 目录 Markdown python-selenium-note "},"markdown/markdown_manual.html":{"url":"markdown/markdown_manual.html","title":"Markdown","keywords":"","body":"Markdown 手册 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 本文简单介绍了 Markdown 的使用方法。 关于更多 Markdown 的使用方法，可以参考 Markdown 教程。 标题 使用 # 表示标题，不同数量的 # 可以表示不同级别的标题，但最多 6 级。 字体风格 使用 * 或 ** 表示斜体和粗体。 示例：这是斜体，这是粗体，这是加粗斜体，这是删除线。 列表 使用 - 表示无序列表，使用 1. 表示有序列表。 示例： 无序列表项 无序列表项 示例： 有序列表项 有序列表项 引用 使用 > 表示引用。 示例： Markdown 是一种轻量级的标记语言。 代码 使用 `代码` 表示代码，用 ``` 使用表示代码块。 示例： print(\"hello, world\") 链接 使用 [描述](链接地址) 为文字添加链接。 示例：这是去往 个人主页 的链接。 图像 使用 ![描述](图片链接地址) 插入图像。 示例： 分割线 使用 --- 表示分割线。 表格 示例： a01 a02 a03 a11 a12 a13 a21 a22 a23 a31 a32 a33 "},"python-selenium-note/python-selenium-note.html":{"url":"python-selenium-note/python-selenium-note.html","title":"python-selenium-note","keywords":"","body":"Python Selenium Note 基于 Python 语言的 Selenium 笔记。 简介 Selenium 是一系列工具和库的综合项目，这些工具和库支持 Web 浏览器的自动化。 在21世纪，信息技术蓬勃发展。对于涉及网页的重复操作，我们可以用技术实现自动化。Selenium 直接运行在浏览器中，就像真正的用户在操作一样。 本文简单介绍了一些 Selenium 的使用方法，并给了一些示例代码。更多内容可以前往 Selenium 浏览器自动化项目文档了解。 环境配置 环境介绍 本文使用了基于 Anaconda3 的 Python 3.8.2 作为编译环境，假定读者已安装该环境，使用其他环境的可以参考。 本节将会指引读者安装以下程序支撑我们编写程序的运行： Selenium 浏览器 Driver Selenium 安装 在 Anaconda3 运行： conda install selenium 浏览器 Driver 注意：不同的浏览器安装不同的 Driver 根据自己的浏览器，以及版本，下载对应的 Driver。 (Chrome)[https://chromedriver.storage.googleapis.com/index.html] (Edge)[https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/] (FireFox)[https://github.com/mozilla/geckodriver/releases] 下载完成后解压缩，将 *driver.exe 放在任意文件夹下，然后将该目录配置至程序中。 环境测试 配置环境完成后，运行 code1_env_test.py 测试，效果为打开 Bing 搜索 Python3。 可能的问题如下： 浏览器不能打开 -> Selenium 配置问题 浏览器打开不能打开网页 -> Driver 配置问题 Selenium 介绍 浏览器 启动浏览器（详见代码1） driver = webdriver.Edge() 打开网页 driver.get(\"https://selenium.dev\") 获取当前网页信息 driver.current_url driver.title 网页刷新 driver.refresh() 切换窗口或标签页（查看详情） all_handles = driver.window_handles for handle in all_handles: if handle != main_windows: driver.switch_to.window(handle) driver.close() driver.switch_to_window(main_windows) 定位 定位的建议 如果 HTML 的 id 是唯一的、可用的，那么它就是在页面上定位元素的首选方法。 如果 id 不合适使用，那么请选择 xpath。 有时需要定位一组元素，有时也需要按文字搜索定位元素。 定位并操作有时需要时间，因此要使用 time.sleep() 方法。 定位并不总是成功，因此需要做好异常处理。 元素与元素们的定位 定位 id 元素示例 driver.find_element(By.ID, 'cheese') 定位 xpath(s) 元素示例 driver.find_elements(By.XPATH, '//span[contains(text(),\"cheese\")]')[0] 另见 本文仅是笔记，读者可以参见 Selenium 浏览器自动化项目文档获取更详细的资料。 许可证 MIT "}}